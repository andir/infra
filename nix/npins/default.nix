# Generated by npins. Do not modify; will be overwritten regularly
let
  data = builtins.fromJSON (builtins.readFile ./sources.json);
  version = data.version;

  mkSource = spec:
    assert spec ? type;
    if spec.type == "Git" then mkGitSource spec
    else if spec.type == "GitRelease" then mkGitSource spec
    else if spec.type == "PyPi" then mkPyPiSource spec
    else builtins.throw "Unknown source type ${spec.type}";

  mkGitSource = spec@{ repository, branch ? null, revision, hash, ... }:
    assert repository ? type;
    let
      path =
        if spec ? url && spec.url != null then
          (builtins.fetchTarball {
            url = spec.url;
            sha256 = hash; # FIXME: check nix version & use SRI hashes
          })
        else assert repository.type == "Git"; builtins.fetchGit {
          url = repository.url;
          ref = "refs/heads/${branch}";
          rev = revision;
          # hash = hash;
        };
    in
    spec // { outPath = path; }
  ;

  mkPyPiSource = spec:
    let
      path = builtins.fetchurl {
        url = spec.url;
        sha256 = spec.hash;
      };
    in
    spec // { outPath = path; };
in
if version == 1 then
  builtins.mapAttrs (_: mkSource) data.pins
else
  throw "Unsupported format version ${toString version} in sources.json. Try running `npins upgrade`"
